version: '3.8'

services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: starqi-db-prod
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data_prod:/var/lib/mysql
      - ./setup/database.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - starqi-network-prod
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      timeout: 20s
      retries: 10
      interval: 30s
    command: --default-authentication-plugin=mysql_native_password

  # Backend API Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    container_name: starqi-server-prod
    restart: always
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: db
      DB_PORT: 3306
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      CORS_ORIGIN: ${CORS_ORIGIN}
      UPLOAD_DIR: /app/uploads
      BASE_URL: ${BASE_URL}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
    volumes:
      - uploads_data_prod:/app/uploads
      - ./server/logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    networks:
      - starqi-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App (Production Build)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
      args:
        VITE_API_URL: ${VITE_API_URL}
    container_name: starqi-client-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./setup/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - server
    networks:
      - starqi-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional - for Phase 2)
  redis:
    image: redis:7-alpine
    container_name: starqi-redis-prod
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - starqi-network-prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

volumes:
  mysql_data_prod:
    driver: local
  uploads_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  starqi-network-prod:
    driver: bridge
